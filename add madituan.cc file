#include <bits/stdc++.h>
using namespace std;

#define N 8

// Function prototypes
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[], int yMove[]);
int isSafe(int x, int y, int sol[N][N]);
void printSolution(int sol[N][N]);

// A utility function to check if x, y are valid indexes for N*N chessboard
int isSafe(int x, int y, int sol[N][N]) {
    return (x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
}

// A utility function to print solution matrix sol[N][N]
void printSolution(int sol[N][N]) {
    for (int x = 0; x < N; x++) {
        for (int y = 0; y < N; y++)
            cout << setw(2) << sol[x][y] << " ";
        cout << endl;
    }
}

// The main function that solves the Knight Tour problem using backtracking
int solveKT() {
    int sol[N][N];

    // Initialization of solution matrix
    for (int x = 0; x < N; x++)
        for (int y = 0; y < N; y++)
            sol[x][y] = -1;

    // xMove[] and yMove[] define next move of Knight.
    int xMove[8] = { 2, 1, -1, -2, -2, -1, 1, 2 };
    int yMove[8] = { 1, 2, 2, 1, -1, -2, -2, -1 };

    // Since the Knight is initially at the first block
    sol[0][0] = 0;

    // Start from 0,0 and explore all tours using solveKTUtil()
    if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == 0) {
        cout << "Solution does not exist";
        return 0;
    } else {
        printSolution(sol);
    }
    return 1;
}

// A recursive utility function to solve Knight Tour problem
int solveKTUtil(int x, int y, int movei, int sol[N][N], int xMove[8], int yMove[8]) {
    int k, next_x, next_y;
    if (movei == N * N) // All squares are visited
        return 1;

    // Try all next moves from the current coordinate x, y
    for (k = 0; k < 8; k++) {
        next_x = x + xMove[k];
        next_y = y + yMove[k];
        if (isSafe(next_x, next_y, sol)) {
            sol[next_x][next_y] = movei; // Mark the next move
            if (solveKTUtil(next_x, next_y, movei + 1, sol, xMove, yMove) == 1)
                return 1; // If successful, return true
            sol[next_x][next_y] = -1; // Backtrack
        }
    }
    return 0; // No valid moves
}

// Driver code
int main() {
    solveKT();
    return 0;
}
